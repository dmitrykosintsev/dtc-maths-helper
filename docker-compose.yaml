services:
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.4.3
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - ES_JAVA_OPTS=-Xms2g -Xmx2g
    ports:
      - "9200:9200"
      - "9300:9300"
    volumes:
      - ${ELASTIC_PATH}/:/usr/share/elasticsearch/data
    healthcheck:
      test: ["CMD", "curl", "-f", "${ELASTIC_URL}"]
      interval: 10s
      timeout: 5s
      retries: 5

  ollama:
    image: ollama/ollama
    container_name: ollama
    volumes:
      - ${OLLAMA_MODELS}:/root/.ollama/
    ports:
      - "11434:11434"
#    deploy:
#      resources:
#        reservations:
#          devices:
#            - driver: nvidia
#              count: all
#              capabilities: [gpu]
    healthcheck:
      test: ["CMD-SHELL", "curl -f ${OLLAMA_URL} || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 10
      start_period: 40s

  postgres:
    image: postgres:13
    container_name: postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "${POSTGRES_PORT}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  streamlit:
    build: .
    container_name: streamlit
    command: ["streamlit", "run", "app.py"]
    environment:
      - ${ELASTIC_URL}
      - OLLAMA_URL=http://ollama:11434
      - POSTGRES_HOST=postgres
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - MODEL_NAME=${MODEL_NAME}
      - INDEX_NAME=${INDEX_NAME}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
    ports:
      - "8501:8501"
    volumes:
      - ./:/app
    depends_on:
      elasticsearch:
        condition: service_healthy
      ollama:
        condition: service_started
      postgres:
        condition: service_started

volumes:
  postgres_data:
